{
  "available-campaign-levels": {
    "demo": {
      "level-01": "hard"
    },
    "tight-spot": {
      "level-01": "hard"
    },
    "transport-belt-madness": {
      "level-01": "hard"
    }
  },
  "console-history": [
    "/c local surface=game.player.surface local ore=nil local size=5 local density=10 for y=-size, size do     for x=-size, size do         a=(size+1-math.abs(x))*10         b=(size+1-math.abs(y))*10         if a<b then             ore=math.random(a*density-a*(density-8), a*density+a*(density-8))         end         if b<a then             ore=math.random(b*density-b*(density-8), b*density+b*(density-8))         end         if surface.get_tile(game.player.position.x+x, game.player.position.y+y).collides_with(\"ground-tile\") then             surface.create_entity({name=\"stone\", amount=ore, position={game.player.position.x+x, game.player.position.y+y}})         end     end end",
    "/c local surface=game.player.surface local ore=1000 local size=5 local density=10 for y=-size, size do     for x=-size, size do         if surface.get_tile(game.player.position.x+x, game.player.position.y+y).collides_with(\"ground-tile\") then             surface.create_entity({name=\"iron\", amount=ore, position={game.player.position.x+x, game.player.position.y+y}})         end     end end",
    "/c local surface=game.player.surface local ore=1000 local size=5 local density=10 for y=-size, size do     for x=-size, size do         if surface.get_tile(game.player.position.x+x, game.player.position.y+y).collides_with(\"ground-tile\") then             surface.create_entity({name=\"iron_ore\", amount=ore, position={game.player.position.x+x, game.player.position.y+y}})         end     end end",
    "/c local surface=game.player.surface local ore=1000 local size=5 local density=10 for y=-size, size do     for x=-size, size do         if surface.get_tile(game.player.position.x+x, game.player.position.y+y).collides_with(\"ground-tile\") then             surface.create_entity({name=\"iron-ore\", amount=ore, position={game.player.position.x+x, game.player.position.y+y}})         end     end end",
    "/c day()  function day() {     game.always_day = true }",
    "/c day()  function day()     game.always_day = true end",
    "/c function day()     game.always_day = true end  day() ",
    "/c function patch(ore, x, y, width, height)     local surface=game.player.surface     local amount=25000000     local size=5     local halfWidth=width/2     local halfHeight=height/2      for i=-math.ceil(halfWidth), math.floor(halfWidth) do         for j=-math.ceil(halfHeight), math.floor(halfHeight) do             local position={x+i, y+j}             local tile=surface.get_tile(x+i, y+j)              if tile.collides_with(\"ground-tile\") then                 surface.create_entity({name=ore, amount=amount, position=position})             end         end     end end  patch(\"uranium-ore\", 0, 0, 7*3, 7*3) ",
    "/c for _, o in pairs(game.player.surface.find_entities_filtered({type='tree'})) do o.destroy() end; game.player.force.rechart()",
    "/c for _, o in pairs(game.player.surface.find_entities_filtered({type='decorative'})) do o.destroy() end; game.player.force.rechart()",
    "/c function pave(x, y, width, height)     local surface=game.player.surface     local tiles={}     local halfWidth=width/2     local halfHeight=height/2      for i=-math.ceil(halfWidth), math.floor(halfWidth) do         for j=-math.ceil(halfHeight), math.floor(halfHeight) do             local position={x+i, y+j}             local tile=surface.get_tile(x+i, y+j)              if not string.match(tile.name, \"water\") then                 table.insert(tiles, {name=\"concrete\", position=position})             end         end     end      surface.set_tiles(tiles) end  pave(0, 0, 55, 55) pave(0, 300, 236, 296)",
    "/c game.player.teleport{0, 300} ",
    "/c pave(0, 300, 236, 296)",
    "/c pave(0, -300, 236, 296) pave(300, 0, 236, 296) pave(-300, 0, 236, 296) ",
    "/c a",
    "/c function pave(type, x, y, width, height)     local surface=game.player.surface     local tiles={}     local halfWidth=width/2     local halfHeight=height/2      for i=-math.ceil(halfWidth), math.floor(halfWidth) do         for j=-math.ceil(halfHeight), math.floor(halfHeight) do             local position={x+i, y+j}             local tile=surface.get_tile(x+i, y+j)              if not string.match(tile.name, \"water\") then                 table.insert(tiles, {name=\"concrete\", position=position})             end         end     end      surface.set_tiles(tiles) end ",
    "/c game.player.character.destroy()",
    "/c pave(\"stone-brick\", 0, 0, 150, 150);",
    "/c pave(\"stone-brick\", 0, 0, 500, 500);",
    "/c game.forces.player.chart(game.player.surface, {lefttop = {x = -2000, y = -2000}, rightbottom = {x = 2000, y = 2000}})",
    "/c pave(\"stone-brick\", 0, 0, 1501, 1501);",
    "/c pave(\"concrete\", 0, 0, 1401, 1401);",
    "/c pave(\"refined-concrete\", 0, 0, 901, 901)",
    "/c for _, o in pairs(game.player.surface.find_entities_filtered({type='tree'})) do o.destroy() end; game.player.force.rechart()  for _, o in pairs(game.player.surface.find_entities_filtered({type='decorative'})) do o.destroy() end; game.player.force.rechart() ",
    "/c game.player.surface.always_day=true",
    "/c game.player.teleport{0, 0} ",
    "/c pave(\"refined-concrete\", 0, 0, 901, 901);",
    "/c function clean(type) {     for _, o in pairs(game.player.surface.find_entities_filtered({type=type})) do         o.destroy()     end     game.player.force.rechart() }  clean(\"tree\") clean(\"decorative\") clean(\"resource\")",
    "/c function clean(type)     for _, o in pairs(game.player.surface.find_entities_filtered({type=type})) do         o.destroy()     end     game.player.force.rechart() end  clean(\"tree\") clean(\"decorative\") clean(\"resource\")",
    "/c clean(\"cliff\")",
    "/c clean(\"water\")",
    "/c clean(\"stone\")",
    "/c clean(\"rock\")",
    "/c clean(\"big-rock\")",
    "/c clean(\"spitter\")",
    "/c clean(\"small-biter\")",
    "/c clean(\"enemy\")",
    "/c game.player.surface.find_entities_filtered()",
    "/c game.player.surface.find_entities_filtered{}",
    "/c game.forces[\"enemy\"].kill_all_units()",
    "/c for key, entity in pairs(game.player.surface.find_entities_filtered({force=\"enemy\"})) do     entity.destroy() end",
    "/c game.player.print(1)",
    "/c game.player.print(game.player.surface.find_entities_filtered())",
    "/c game.player.print(game.player.surface.find_entities_filtered({}))",
    "clean(\"tree\") clean(\"simple-entity\") clean(\"decorative\") clean(\"resource\") clean(\"cliff\") clean(\"fish\") ",
    "/c for _, o in pairs(game.player.surface.find_entities_filtered{}) do     game.player.print(o.type) end"
  ],
  "service-username": "",
  "service-token": "",
  "last-used-filters": {
    "password": "any",
    "mods": "any",
    "friends": "any"
  },
  "column-ordering": {
    "public-index": "name",
    "public-ascending": true,
    "lan-index": "name",
    "lan-ascending": true
  },
  "last-played-version": {
    "game_version": "0.16.51",
    "build_version": 36654,
    "build_mode": "steam",
    "platform": "mac"
  }
}
